{"version":3,"sources":["../../src/utilities/createIndexCode.js"],"names":["safeVariableName","fileName","indexOfDot","indexOf","slice","defaultFactory","filename","block","implicitDefault","explicitDefault","buildExportBlock","files","options","transform","map","join","filePaths","code","configCode","banner","banners","_","isArray","forEach","config","size","JSON","stringify","length","sortedFilePaths","sort"],"mappings":";;;;;;AAAA;;;;;;AAEA,MAAMA,mBAAoBC,QAAD,IAAc;AACrC,QAAMC,aAAaD,SAASE,OAAT,CAAiB,GAAjB,CAAnB;;AAEA,MAAID,eAAe,CAAC,CAApB,EAAuB;AACrB,WAAOD,QAAP;AACD,GAFD,MAEO;AACL,WAAOA,SAASG,KAAT,CAAe,CAAf,EAAkBF,UAAlB,CAAP;AACD;AACF,CARD;;AAUA;AACA,MAAMG,iBAAiB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC1C,SAAO,YAAYA,KAAZ,GAAoB,YAApB,GAAmCD,QAAnC,GAA8C,KAArD;AACD,CAFD;;AAIA;AACA,MAAME,kBAAmBP,QAAD,IAAc;AACpC,SAAOI,eAAeJ,QAAf,EAAyBD,iBAAiBC,QAAjB,CAAzB,CAAP;AACD,CAFD;;AAIA;AACA,MAAMQ,kBAAmBR,QAAD,IAAc;AACpC,SAAOI,eAAeJ,QAAf,EAAyB,kBAAkBD,iBAAiBC,QAAjB,CAAlB,GAA+C,IAAxE,CAAP;AACD,CAFD;AAGA,MAAMS,mBAAmB,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3C,QAAMC,YAAYD,QAAQJ,eAAR,GAChBA,eADgB,GAEhBC,eAFF;;AAIA,SAAOE,MAAMG,GAAN,CAAUD,SAAV,EAAqBE,IAArB,CAA0B,IAA1B,CAAP;AACD,CAND;;kBAQe,UAACC,SAAD,EAA6B;AAAA,MAAjBJ,OAAiB,uEAAP,EAAO;;AAC1C,MAAIK,IAAJ;AACA,MAAIC,UAAJ;;AAEAD,SAAO,EAAP;AACAC,eAAa,EAAb;AACA,MAAIN,QAAQO,MAAZ,EAAoB;AAClB,UAAMC,UAAUC,iBAAEC,OAAF,CAAUV,QAAQO,MAAlB,IAA4BP,QAAQO,MAApC,GAA6C,CAACP,QAAQO,MAAT,CAA7D;;AAEAC,YAAQG,OAAR,CAAiBJ,MAAD,IAAY;AAC1BF,cAAQE,SAAS,IAAjB;AACD,KAFD;;AAIAF,YAAQ,IAAR;AACD;;AAED,MAAIL,QAAQY,MAAR,IAAkBH,iBAAEI,IAAF,CAAOb,QAAQY,MAAf,IAAyB,CAA/C,EAAkD;AAChDN,kBAAc,MAAMQ,KAAKC,SAAL,CAAef,QAAQY,MAAvB,CAApB;AACD;;AAEDP,UAAQ,qBAAqBC,UAArB,GAAkC,MAA1C;;AAEA,MAAIF,UAAUY,MAAd,EAAsB;AACpB,UAAMC,kBAAkBb,UAAUc,IAAV,EAAxB;;AAEAb,YAAQP,iBAAiBmB,eAAjB,EAAkCjB,OAAlC,IAA6C,MAArD;AACD;;AAED,SAAOK,IAAP;AACD,C","file":"createIndexCode.js","sourcesContent":["import _ from 'lodash';\n\nconst safeVariableName = (fileName) => {\n  const indexOfDot = fileName.indexOf('.');\n\n  if (indexOfDot === -1) {\n    return fileName;\n  } else {\n    return fileName.slice(0, indexOfDot);\n  }\n};\n\n// export (tough bit) from './file\nconst defaultFactory = (filename, block) => {\n  return 'export ' + block + ' from \\'./' + filename + '\\';';\n};\n\n// tough bit = file\nconst implicitDefault = (fileName) => {\n  return defaultFactory(fileName, safeVariableName(fileName));\n};\n\n// tough bit = { default as file }\nconst explicitDefault = (fileName) => {\n  return defaultFactory(fileName, '{ default as ' + safeVariableName(fileName) + ' }');\n};\nconst buildExportBlock = (files, options) => {\n  const transform = options.implicitDefault ?\n    implicitDefault :\n    explicitDefault;\n\n  return files.map(transform).join('\\n');\n};\n\nexport default (filePaths, options = {}) => {\n  let code;\n  let configCode;\n\n  code = '';\n  configCode = '';\n  if (options.banner) {\n    const banners = _.isArray(options.banner) ? options.banner : [options.banner];\n\n    banners.forEach((banner) => {\n      code += banner + '\\n';\n    });\n\n    code += '\\n';\n  }\n\n  if (options.config && _.size(options.config) > 0) {\n    configCode += ' ' + JSON.stringify(options.config);\n  }\n\n  code += '// @create-index' + configCode + '\\n\\n';\n\n  if (filePaths.length) {\n    const sortedFilePaths = filePaths.sort();\n\n    code += buildExportBlock(sortedFilePaths, options) + '\\n\\n';\n  }\n\n  return code;\n};\n"]}