{"version":3,"sources":["../../src/utilities/createIndexCode.js"],"names":["safeVariableName","fileName","indexOfDot","indexOf","slice","defaultFactory","filename","block","implicitDefaultExport","explicitDefaultExport","wildcardExport","folderName","buildExportBlock","files","options","transform","file","isFolder","split","length","defaultExport","implicitDefault","wildcardFolders","map","join","filePaths","code","configCode","banner","banners","_","isArray","forEach","config","size","JSON","stringify","sortedFilePaths","sort"],"mappings":";;;;;;AAAA;;;;;;AAEA,MAAMA,mBAAoBC,QAAD,IAAc;AACrC,QAAMC,aAAaD,SAASE,OAAT,CAAiB,GAAjB,CAAnB;;AAEA,MAAID,eAAe,CAAC,CAApB,EAAuB;AACrB,WAAOD,QAAP;AACD,GAFD,MAEO;AACL,WAAOA,SAASG,KAAT,CAAe,CAAf,EAAkBF,UAAlB,CAAP;AACD;AACF,CARD;;AAUA;AACA,MAAMG,iBAAiB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAC1C,SAAO,YAAYA,KAAZ,GAAoB,YAApB,GAAmCD,QAAnC,GAA8C,KAArD;AACD,CAFD;;AAIA;AACA,MAAME,wBAAyBP,QAAD,IAAc;AAC1C,SAAOI,eAAeJ,QAAf,EAAyBD,iBAAiBC,QAAjB,CAAzB,CAAP;AACD,CAFD;;AAIA;AACA,MAAMQ,wBAAyBR,QAAD,IAAc;AAC1C,SAAOI,eAAeJ,QAAf,EAAyB,kBAAkBD,iBAAiBC,QAAjB,CAAlB,GAA+C,IAAxE,CAAP;AACD,CAFD;;AAIA;AACA,MAAMS,iBAAkBC,UAAD,IAAgB;AACrC,SAAON,eAAeM,UAAf,EAA2B,UAAUA,UAArC,CAAP;AACD,CAFD;;AAIA,MAAMC,mBAAmB,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC3C,QAAMC,YAAaC,IAAD,IAAU;AAC1B,UAAMC,WAAWD,KAAKE,KAAL,CAAW,GAAX,EAAgBC,MAAhB,KAA2B,CAA5C;AACA,UAAMC,gBAAgBN,QAAQO,eAAR,GACpBb,qBADoB,GAEpBC,qBAFF;;AAIA,QAAIQ,YAAYH,QAAQQ,eAAxB,EAAyC;AACvC,aAAOZ,eAAeM,IAAf,CAAP;AACD;;AAED,WAAOI,cAAcJ,IAAd,CAAP;AACD,GAXD;;AAaA,SAAOH,MAAMU,GAAN,CAAUR,SAAV,EAAqBS,IAArB,CAA0B,IAA1B,CAAP;AACD,CAfD;;kBAiBe,UAACC,SAAD,EAA6B;AAAA,MAAjBX,OAAiB,uEAAP,EAAO;;AAC1C,MAAIY,IAAJ;AACA,MAAIC,UAAJ;;AAEAD,SAAO,EAAP;AACAC,eAAa,EAAb;AACA,MAAIb,QAAQc,MAAZ,EAAoB;AAClB,UAAMC,UAAUC,iBAAEC,OAAF,CAAUjB,QAAQc,MAAlB,IAA4Bd,QAAQc,MAApC,GAA6C,CAACd,QAAQc,MAAT,CAA7D;;AAEAC,YAAQG,OAAR,CAAiBJ,MAAD,IAAY;AAC1BF,cAAQE,SAAS,IAAjB;AACD,KAFD;;AAIAF,YAAQ,IAAR;AACD;;AAED,MAAIZ,QAAQmB,MAAR,IAAkBH,iBAAEI,IAAF,CAAOpB,QAAQmB,MAAf,IAAyB,CAA/C,EAAkD;AAChDN,kBAAc,MAAMQ,KAAKC,SAAL,CAAetB,QAAQmB,MAAvB,CAApB;AACD;;AAEDP,UAAQ,qBAAqBC,UAArB,GAAkC,MAA1C;;AAEA,MAAIF,UAAUN,MAAd,EAAsB;AACpB,UAAMkB,kBAAkBZ,UAAUa,IAAV,EAAxB;;AAEAZ,YAAQd,iBAAiByB,eAAjB,EAAkCvB,OAAlC,IAA6C,MAArD;AACD;;AAED,SAAOY,IAAP;AACD,C","file":"createIndexCode.js","sourcesContent":["import _ from 'lodash';\n\nconst safeVariableName = (fileName) => {\n  const indexOfDot = fileName.indexOf('.');\n\n  if (indexOfDot === -1) {\n    return fileName;\n  } else {\n    return fileName.slice(0, indexOfDot);\n  }\n};\n\n// export (tough bit) from './file\nconst defaultFactory = (filename, block) => {\n  return 'export ' + block + ' from \\'./' + filename + '\\';';\n};\n\n// tough bit = file\nconst implicitDefaultExport = (fileName) => {\n  return defaultFactory(fileName, safeVariableName(fileName));\n};\n\n// tough bit = { default as file }\nconst explicitDefaultExport = (fileName) => {\n  return defaultFactory(fileName, '{ default as ' + safeVariableName(fileName) + ' }');\n};\n\n// tough bit = * as file\nconst wildcardExport = (folderName) => {\n  return defaultFactory(folderName, '* as ' + folderName);\n};\n\nconst buildExportBlock = (files, options) => {\n  const transform = (file) => {\n    const isFolder = file.split('.').length === 1;\n    const defaultExport = options.implicitDefault ?\n      implicitDefaultExport :\n      explicitDefaultExport;\n\n    if (isFolder && options.wildcardFolders) {\n      return wildcardExport(file);\n    }\n\n    return defaultExport(file);\n  };\n\n  return files.map(transform).join('\\n');\n};\n\nexport default (filePaths, options = {}) => {\n  let code;\n  let configCode;\n\n  code = '';\n  configCode = '';\n  if (options.banner) {\n    const banners = _.isArray(options.banner) ? options.banner : [options.banner];\n\n    banners.forEach((banner) => {\n      code += banner + '\\n';\n    });\n\n    code += '\\n';\n  }\n\n  if (options.config && _.size(options.config) > 0) {\n    configCode += ' ' + JSON.stringify(options.config);\n  }\n\n  code += '// @create-index' + configCode + '\\n\\n';\n\n  if (filePaths.length) {\n    const sortedFilePaths = filePaths.sort();\n\n    code += buildExportBlock(sortedFilePaths, options) + '\\n\\n';\n  }\n\n  return code;\n};\n"]}